#type Task
#  @model
#  @auth(
#    rules: [
#      { allow: groups, groups: ["Managers"], queries: null, mutations: [create, update, delete] }
#      { allow: groups, groups: ["Employees"], queries: [get, list], mutations: null }
#    ]
#  ) {
#  id: ID!
#  title: String!
#  description: String
#  status: String
#}
#type PrivateNote @model @auth(rules: [{ allow: owner }]) {
#  id: ID!
#  content: String!
#}

type User
@model
{
  id: ID!
  username: String!
  name: String
  email: String!
  accountType: String
  status: String
  image: String
  tweets: [Tweet] @connection(keyName: "byUser", fields: ["id"])
  fleets: [Fleet] @connection(keyName: "byUser", fields: ["id"])
}

type Tweet
@model
@key(name: "byUser", fields: ["userID"])
@key(name: "byDate", fields: ["createdAt"], queryField: "tweetsByDate")
{
  id: ID!
  content: String!
  image: String
  userID: ID!
  user: User @connection(fields: ["userID"])
  likes: [Like] @connection(keyName: "byTweet", fields: ["id"])
  createdAt: String!
}

type Fleet
@model
@key(name: "byUser", fields: ["userID"])
{
  id: ID!
  type: String!
  text: String
  image: String
  userID: ID!
  user: User @connection(fields: ["userID"])
}

type Like
# Disable queries as it's not needed. Likes while be queried with their tweets
@model(queries: null)
# 2 keys for the many-to-many relations between User and Tweet.
@key(name: "byUser", fields: ["userID","tweetID"])
@key(name: "byTweet", fields: ["tweetID", "userID"])
{
  id: ID!
  userID: ID!
  tweetID: ID!
  user: User! @connection(fields: ["userID"])
  tweet: Tweet! @connection(fields: ["tweetID"])

}
