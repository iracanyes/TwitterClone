# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

#type Task
#  @model
#  @auth(
#    rules: [
#      { allow: groups, groups: ["Managers"], queries: null, mutations: [create, update, delete] }
#      { allow: groups, groups: ["Employees"], queries: [get, list], mutations: null }
#    ]
#  ) {
#  id: ID! @primaryKey
#  title: String!
#  description: String
#  status: String
#}
#type PrivateNote @model @auth(rules: [{ allow: owner }]) {
#  id: ID!
#  content: String!
#}

type User
@auth(rules: [
    { allow: public, operations: [read] },
    { allow: groups, groups: ["Customer"], operations: [read] }
    { allow: owner, operations: [create, read, update, delete] }
])
@model
{
  id: ID! @primaryKey
  username: String!
  name: String
  email: String!
  accountType: String
  status: String
  image: String
  tweets: [Tweet] @hasMany(indexName: "byUser",  fields: ["id"])
  fleets: [Fleet] @hasMany(indexName: "byUser",  fields: ["id"])
  likes: [Like] @hasMany(indexName: "byUser",  fields: ["id"])
}

type Tweet
@auth(rules: [
    { allow: public, operations: [read] },
    { allow: owner, operations: [create, read, update, delete] }
])
@model
{
  id: ID! @primaryKey
  content: String!
  image: String
  userID: ID! @index(name: "byUser", sortKeyFields: ["createdAt"])
  user: User @belongsTo(fields: ["userID"])
  likes: [Like] @hasMany(indexName: "byTweet", fields: ["id"])
  createdAt: String! @index(name: "byDate", queryField: "tweetsByDate")
}

type Fleet
@auth(rules: [
    { allow: public, operations: [read] },
    { allow: owner, operations: [create, read, update, delete] }
])
@model
{
  id: ID! @primaryKey
  type: String!
  text: String
  image: String
  userID: ID! @index(name: "byUser", sortKeyFields: ["createdAt"])
  user: User @belongsTo(fields: ["userID"])
  createdAt: String! @index(name: "byDate", queryField: "fleetsByDate")
}

type Like
@auth(rules: [
    { allow: public, operations: [read] },
    { allow: owner, operations: [create, read, update, delete] }
])
# Disable queries as it's not needed. Likes while be queried with their tweets
@model(queries: null)
# 2 keys for the many-to-many relations between User and Tweet.
{
  id: ID! @primaryKey
  userID: ID! @index(name: "byUser", sortKeyFields: ["tweetID"])
  tweetID: ID! @index(name: "byTweet", sortKeyFields: ["userID"])
  user: User! @belongsTo(fields: ["userID"])
  tweet: Tweet! @belongsTo(fields: ["tweetID"])

}